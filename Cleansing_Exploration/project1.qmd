---
title: "Client Report - PUERTO RICO TERRITORY EXPLORATION"
subtitle: "Data Exploration 1"
author: "Elie S MAMBOU"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---


```{python}
# | label: libraries
# | include: false

# Imports
import pandas as pd
import altair as alt


```

## Elevator pitch

_Our project aims to analyze the popularity trends of given names in Puerto Rico from 1998 to 2000. By leveraging machine learning techniques, we develop a model that predicts the popularity of a name based on historical data. This model can help sociologists and policymakers understand naming trends and their cultural significance. Discover how our data-driven approach provides insights into naming conventions in Puerto Rico._


```{python}
# | label: project data
# Read Data

puertoRico_territory = pd.read_csv("PuertoRico.csv")
```



## SAMPLING DATA

```{python}

# Sample the data
sampled_df = puertoRico_territory.sample(n=3000, random_state=42)

# Filter for specific years
filtered_df = sampled_df[sampled_df['year'].isin([1998, 1999, 2000])]

# Create a chart with Altair
chart = alt.Chart(filtered_df).mark_bar().encode(
    x='year:O',
    y='count:Q',
    color='name:N'
).properties(title="Sampled Name count by Year")

chart.show()
```


## TOP 5 NAMES IN 2010

```{python}
# Data preparation for top 5 names in 2010

# Filter for the year 2010
filtered_2010 = puertoRico_territory[puertoRico_territory['year'] == 2010]

# Group by name and calculate total counts
name_freq_2010 = filtered_2010.groupby('name')['count'].sum().reset_index()

# Get the top 5 names
top_5_names_2010 = name_freq_2010.nlargest(5, 'count')

# Print the top 5 names
print("Top 5 names in 2010:")
print(top_5_names_2010)


```


## VISUALISATION OF THE TOP 5 NAMES IN 2010

```{python}
# Visualization of the top 5 names in 2010

chart_top_5_2010 = (
    alt.Chart(top_5_names_2010)
    .mark_bar()
    .encode(x='count:Q', y=alt.Y('name:N', sort='-x'))
    .properties(title='Top 5 Names in 2010')
)

chart_top_5_2010.show()

```



## Top 10 Female Names in 2000 and 2005


```{python}
# Data preparation for top 10 female names in 2000 and 2005

# Filter for the years 2000 and 2005 and for female gender
filtered_2000_2005_female = puertoRico_territory[
    (puertoRico_territory['year'].isin([2000, 2005])) & 
    (puertoRico_territory['gender'] == 'F')
]

# Group by year and name, and calculate total counts
name_freq_2000_2005_female = (
    filtered_2000_2005_female
    .groupby(['year', 'name'])
    .agg({'count': 'sum'})
    .reset_index()
)

# Get the top 10 female names for each year
top_10_female_2000 = (
    name_freq_2000_2005_female[name_freq_2000_2005_female['year'] == 2000]
    .nlargest(10, 'count')
)
top_10_female_2005 = (
    name_freq_2000_2005_female[name_freq_2000_2005_female['year'] == 2005]
    .nlargest(10, 'count')
)

# Print the top 10 female names for each year
print("Top 10 Female Names in 2000:")
print(top_10_female_2000)
print("\nTop 10 Female Names in 2005:")
print(top_10_female_2005)

```




## NAMES FOR MALE NAMES IN THE YEARS 2000 AND 2005

```{python}
# Filtering for male names and the years 2000 and 2005
filtered_df = puertoRico_territory[(puertoRico_territory['year'].isin([2000, 2005])) & (puertoRico_territory['gender'] == 'M')]

# Grouping by year and name, then summing the counts
name_freq = (
    filtered_df.groupby(["year", "name"]).agg({"count": "sum"}).reset_index()
)

# Getting the top 10 names for each year
top_names_2000 = name_freq[name_freq["year"] == 2000].nlargest(10, "count")
top_names_2005 = name_freq[name_freq["year"] == 2005].nlargest(10, "count")

# Combining the data for both years
top_names_combined = pd.concat([top_names_2000, top_names_2005])

# Creating a bar chart with Altair
chart = (
    alt.Chart(top_names_combined)
    .mark_bar()
    .encode(
        x=alt.X('count:Q', title='Count'),
        y=alt.Y('name:N', sort='-x', title='Name'),
        color=alt.Color('year:N', title='Year'),
        column=alt.Column('year:N', title='Year')
    )
    .properties(title="Top 10 Male Names in 2000 and 2005")
    .configure_axis(
        labelFontSize=12,
        titleFontSize=14
    )
    .configure_title(
        fontSize=16
    )
)

chart.show()

```



## FILTERING FOR SPECIFIC YEARS

```{python}
# Filtering for specific years
filtered_df = puertoRico_territory[puertoRico_territory['year'].isin([2000, 2010])]

# Grouping by year and name, then summing the counts
name_freq = (
    filtered_df.groupby(["year", "name"]).agg({"count": "sum"}).reset_index()
)

# Chart 1: Naming count by Year
chart1 = (
    alt.Chart(name_freq)
    .mark_line()
    .encode(
        x=alt.X('year:O', title='Year'),
        y=alt.Y('count:Q', title='Count'),
        color=alt.Color('name:N', title='Name')
    )
    .properties(title="Name Count by Year (2000 and 2010)")
)

chart1.show()

# Chart 2: Top 10 Names in 2000 and 2010
top_names_2000 = name_freq[name_freq["year"] == 2000].nlargest(10, "count")
top_names_2010 = name_freq[name_freq["year"] == 2010].nlargest(10, "count")

# Combining the data for both years
top_names_combined = pd.concat([top_names_2000, top_names_2010])

chart2 = (
    alt.Chart(top_names_combined)
    .mark_bar()
    .encode(
        x=alt.X('count:Q', title='Count'),
        y=alt.Y('name:N', sort='-x', title='Name'),
        color=alt.Color('year:N', title='Year'),
        column=alt.Column('year:N', title='Year')
    )
    .properties(title="Top 10 Names in 2000 and 2010")
)

chart2.show()

```


## Exploratory Data Analysis (EDA): Creating 2 charts that evaluate potential relationships between the name frequencies and the years.__


```{python}
# Data preparation for charting
# Filtering for the years you want to analyze
filtered_df = puertoRico_territory[puertoRico_territory['year'].isin([1998, 1999, 2000])]

# Grouping by year and name, then summing the counts
name_freq = (
    filtered_df.groupby(["year", "name"]).agg({"count": "sum"}).reset_index()
)

# Chart 1: Naming Frequency Trends Over the Years
chart1 = (
    alt.Chart(name_freq)
    .mark_line()
    .encode(
        x=alt.X('year:O', title='Year'),
        y=alt.Y('count:Q', title='Frequency'),
        color=alt.Color('name:N', title='Name'),
        tooltip=['name:N', 'count:Q']
    )
    .properties(title="Name Frequency Trends Over the Years (1998, 1999, 2000)")
)

chart1.show()

# Chart 2: Top 10 Names for Each Year
# Getting top 10 names for each year
top_names = (
    name_freq.groupby("year")
    .apply(lambda x: x.nlargest(10, 'count'))
    .reset_index(drop=True)
)

chart2 = (
    alt.Chart(top_names)
    .mark_bar()
    .encode(
        x=alt.X('count:Q', title='Frequency'),
        y=alt.Y('name:N', sort='-x', title='Name'),
        color=alt.Color('year:N', title='Year'),
        column=alt.Column('year:N', title='Year'),
        tooltip=['name:N', 'count:Q']
    )
    .properties(title="Top 10 Names by Year (1998, 1999, 2000)")
)

chart2.show()


```



## FILTERING FOR THE YEARS 1998 AND 2000


```{python}
# Filtering for the years 1998 and 2000
filtered_df = puertoRico_territory[puertoRico_territory["year"].isin([1998, 2000])]

# Grouping by year and name, then summing the counts
name_freq = filtered_df.groupby(["year", "name"]).agg({"count": "sum"}).reset_index()

# Chart 1: Naming Frequency Trends for 1998 and 2000
chart1 = (
    alt.Chart(name_freq)
    .mark_line()
    .encode(
        x=alt.X("name:N", title="Name"),
        y=alt.Y("count:Q", title="Frequency"),
        color=alt.Color("year:N", title="Year"),
        column=alt.Column("year:N", title="Year"),
        tooltip=["name:N", "count:Q"],
    )
    .properties(title="Name Frequency Trends for 1998 and 2000")
)

chart1.show()

# Chart 2: Top 10 Names for Each Year
# Geting top 10 names for each year
top_names = (
    name_freq.groupby("year")
    .apply(lambda x: x.nlargest(10, "count"))
    .reset_index(drop=True)
)

chart2 = (
    alt.Chart(top_names)
    .mark_bar()
    .encode(
        x=alt.X("count:Q", title="Frequency"),
        y=alt.Y("name:N", sort="-x", title="Name"),
        color=alt.Color("year:N", title="Year"),
        column=alt.Column("year:N", title="Year"),
        tooltip=["name:N", "count:Q"],
    )
    .properties(title="Top 10 Names for 1998 and 2000")
)

chart2.show()

```



